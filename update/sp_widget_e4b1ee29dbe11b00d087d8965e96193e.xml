<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($location, $http, cabrillo, spModal) {
  /* widget controller */
  var c = this;
	
	// State variables and constants
  c.loaded = false;
	c.requestsLoaded = false;
	c.showDetails = true;
	c.freeformClicked = false;
	c.createNewClicked = false;
	c.freeformOrderClicked = false;
	c.closeNewTask = true;
	c.closeWholeForm = true;
	c.maxLength = 160;
	c.noItems = false;
	c.freeformText = '';
	c.freeformScan = true;
	c.assetSysId = '';
	c.showBarcode = false;
	c.showTaskButtons = false;
	
	// This map is used to reformat the asset object
	// to a more readible format.
  c.ASSET_KEY_MAP = {
    'modelCategory': 'Model Category',
    'model': 'Model',
		'acquisitionCountry': 'Acquisition Country',
    'assetType': 'Asset Type',
    'retirementDate': 'Retirement Date',
		'assignedTo': 'Assigned To',
		'assignedToIsVIP': 'Assigned to VIP',
		'state': 'State',
		'substate': 'Sub State',
		'stockroom': 'Bin',
		'legalHold': 'Legal Hold',
		'serialNumber': 'Serial Number'
  };
	
	// This map is used reformat the ritm object
	// to a more readible format.
	c.ITEM_KEY_MAP = {
		'itemNumber': 'RITM',
		'item': 'Type',
		'stage': 'Stage',
		'dataReclamation': 'Data Reclamation'
	};
	
	// These functions are used to open the servicenow
	// forms for the current asset, item or incident.
	
	c.viewAsset = function(){
		spModal.open({
			title: "Asset",
			widget: "fd1f4ec347730200ba13a5554ee490c0",
			widgetInput:{
				table: "alm_asset",
				sys_id: c.assetSysId,
				view: 'Default'
			},
			size: "lg"
		});
	}
	
	c.viewRequestedItem = function(sys_id){
		spModal.open({
			title: "Requested Item",
			widget: "fd1f4ec347730200ba13a5554ee490c0",
			widgetInput:{
				table: "sc_req_item",
				sys_id: sys_id,
				view: 'Default'
			},
			size: "lg"
		});
	}
	
	c.viewIncident = function(sys_id){
		spModal.open({
			title: "Incident",
			widget: "fd1f4ec347730200ba13a5554ee490c0",
			widgetInput:{
				table: "incident",
				sys_id: sys_id,
				view: 'Default'
			},
			size: "lg"
		});
	}
	
	
	c.closeBox = function(event){
		var target = event.target || event.srcElement;
		if (target.id == "freeformAdd" ||
				target.id == "freeformPlusContainer" ||
				target.id == "freeformPlusIcon") {
		} else if (target.id != "freeformTextarea" &&
							 target.id != "freeformButton" &&
							 target.id != "freeformCheckbox" &&
							 target.id != "freeformLabel") {
		}
	}

  c.getParameterByName = function(param) {
	   return $location.search()[param];
  };
	
  c.navigate = function(link) {
	  window.location.href = link;
  };
	
	c.toggleDetails = function(){
		if(c.showDetails){
			c.showDetails = false;
		}else{
			c.showDetails = true;
		}
	};
  
  c.getAsset = function(serial){
	    c.loaded = false;
		$http({
			method: 'get',
			url: '/api/x_gege9_asset_scan/asset_scanner/GetAssetInfo/' + serial,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				c.assetSysId = response.data.result.sysId;
				getTodoList(response.data.result.sysId);
				c.transformData(response.data.result);
				c.error = false;
				c.loaded = true;
			}else{
				c.error = true;
				if(!!response.errorMessage){
					c.errorMessage = response.errorMessage;
				}
				c.loaded = true;
			}
		}, function(response){
			c.errorMessage = "Unable to find this serial number. Try entering manually.";
			c.error = true;
			c.loaded = true;
		});
	};
  
  c.transformData = function(data) {
	  c.image = data.modelImage;
		c.sysId = data.sysId;
	  c.url = data.url;
	  c.details = c.mapProperties(data, c.ASSET_KEY_MAP);
  };
	
  c.mapProperties = function(obj, mapping) {
	Object.keys(obj)
      .forEach(function(key) {
        var newKey = mapping[key];
        if (typeof(newKey) != 'undefined')
          obj[newKey] = obj[key];
        delete(obj[key]);
      });
    return obj;
  };
	
	//Click the number to change the order of the freeform todos
	c.orderFreeformTodos = function(todo){
		if (todo.state == '7') { 
			c.freeformOrderClicked = true;
		}

	};
	
	//Click the todo list item and bring up the camera to scan the stockroom
	c.scanTodo = function(todo){
		if (todo.state == '1'){
			cabrillo.camera.getBarcode().then(function(barcode) {
				if (barcode){
					c.showBinResults = true;
					c.showBinButtons = false;
					updateStockroom(c.assetSysId, todo.sysId, barcode);
				}else{
					c.error = true;
					c.errorMessage = "Try Again";
				}
			}, function(error) {
				c.error = true;
				c.errorMessage = "Unable to scan.";
			})
		}
	};
	
	// This function is called to invoke
	// all the actions to skip a todo item 
	// from the UI.
	c.markSkipped = function(todoSysId){
		skipTodo(todoSysId);
		c.showBinResults = true;
		c.showForm = false;
		c.showBinButtons = false;
	};
	
	
	c.toggleFreeformSlider = function() {
		c.showTaskButtons = !c.showTaskButtons;
	};
	
	c.toggleNewTaskForm = function() {
		c.createNewClicked = !c.createNewClicked;
	};
	
	c.freeformSubmit = function(shortDescription) {
		if (shortDescription.length > 160) {
			c.error = true;
			c.shortDescriptionError = true;
			c.errorMessage = "Your description is too long.";
			return;
		} 
		
		if (shortDescription.trim().length === 0) {
			c.error = true;
			c.shortDescriptionError = true;
			c.errorMessage = "Please enter a description.";
			return;
		} 
		
		c.freeformText = '';
		c.shortDescriptionError = false;
		c.error = false;
		createTodo(shortDescription);
	};
	
	c.getRequestedItems = function(){
		$http({
			method: 'get',
			url: '/api/x_gege9_asset_scan/asset_scanner/getAssetRequestedItems/' + c.assetSysId,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				var data = response.data.result;
				c.requests = data.map(function(item) {
					var request = {};
					request.url = item.url;
					request.sysId = item.sysId;
					request.details = c.mapProperties(item, c.ITEM_KEY_MAP);
					c.requestsLoaded = true;
					return request;
				});
			}
		},
		function(data){
			c.noItems = true;
		})
	}
	
	c.getRecentIncidents = function(){
		$http({
			method: 'get',
			url: '/api/x_gege9_asset_scan/asset_scanner/getRecentIncidents/' + c.assetSysId,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				var data = response.data.result;
				c.incidents = data.map(function(item) {
					var incident = {};
					incident.url = item.url;
					incident.number = item.itemNumber;
					incident.sysId = item.sysId;
					incident.description = item.description;
					incident.state = item.state;
					c.requestsLoaded = true;
					return incident;
				});
			}
		},
		function(data){
			c.noItems = true;
		})
	}
	
	function getTodoList(sysId){
		$http({
			method: 'get',
			url: '/api/x_gege9_asset_scan/asset_scanner/getToDoList/' + sysId,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				c.openTodos = response.data.result.filter(function(todo){
					todo.shortDescription.replace("Ê¼", "'");
					return todo.state == '1';
				});
				c.completedTodos = response.data.result.filter(function(todo){
					return todo.state != '1';
				});
				c.error = false;
			}else{
				c.error = true;
				if(!!response.errorMessage){
					c.errorMessage = response.errorMessage;
				}
			}
		}, function(response){
			c.errorMessage = "Unable to find this todo list. Try entering manually.";
			c.error = true;
		});
	}
	
	c.createNoRequestTodos = function(){
		$http({
			method: 'post',
			url: '/api/x_gege9_asset_scan/asset_scanner/' + c.assetSysId,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				getTodoList(c.assetSysId);
			}
		});
	}
	
	function updateStockroom(assetSysId, todoSysId, stockroom){
	    c.loaded = false;
		$http({
			method: 'post',
			url: '/api/x_gege9_asset_scan/asset_scanner/updateStockroom/' + assetSysId + '/' + stockroom,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				c.stockroomData = response.data.result;
				c.stockroomSysId = response.data.result.sysId;
				c.error = false;
				c.loaded = true;
				c.completeTodo(todoSysId);
			}else{
				c.error = true;
				if(!!response.errorMessage){
					c.errorMessage = response.errorMessage;
				}
				c.loaded = true;
			}
		}, function(response){
			c.errorMessage = "Unable to find this stockroom. Try entering manually.";
			c.error = true;
			c.loaded = true;
		});
	}
	
	c.completeTodo = function(todoSysId){
		$http({
			method: 'post',
			url: '/api/x_gege9_asset_scan/asset_scanner/completeToDo/' + todoSysId,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				c.error = false;
				c.getAsset(c.serial_no)
				//getTodoList(c.assetSysId);
			}else{
				c.error = true;
				if(!!response.errorMessage){
					c.errorMessage = response.errorMessage;
				}
			}
		}, function(response){
			c.errorMessage = "Unable to find this todo item.";
			c.error = true;
		});
	}
	
	c.markLegalHold = function(todoSysId){
		var legalHold = 'true';
		$http({
			method: 'post',
			url: '/api/x_gege9_asset_scan/asset_scanner/' + c.assetSysId + '/' + legalHold,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				c.error = false;
				c.completeTodo(todoSysId);
			}else{
				c.error = true;
				if(!!response.errorMessage){
					c.errorMessage = response.errorMessage;
				}
			}
		}, function(response){
			c.errorMessage = "Unable to update Legal Hold.";
			c.error = true;
		});
	}
	
	function skipTodo(todoSysId){
		$http({
			method: 'post',
			url: '/api/x_gege9_asset_scan/asset_scanner/skipToDo/' + todoSysId,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function(response){
			if(response.statusText === 'OK'){
				c.error = false;
				getTodoList(c.assetSysId);
			}else{
				c.error = true;
				if(!!response.errorMessage){
					c.errorMessage = response.errorMessage;
				}
			}
		}, function(response){
			c.errorMessage = "Unable to find this todo item.";
			c.error = true;
		});
	}
	
	// Client side access to camera scan
	c.binScanPage = function(){
			window.location.href = 'asset_scan?id=bin_scan&sys_id=' + c.sysId;
	};
	
	c.addMoveTask = function(){
		spModal.open({
			title: 'Description of Move',
			buttons: [{label: 'Submit', primary: true}],
			input: true,
			size: 'lg'
		}).then(function(value){
			$http({
				method: 'post',
				url: '/api/x_gege9_asset_scan/asset_scanner/createFreeForm/' +
				c.assetSysId + '/' + value + '/true',
				headers: {
					'Content-Type': 'application/json'
				}
			}).then(function(response){
				if(response.statusText === 'OK'){
					c.error = false;
					c.freeformDescription = '';
					c.freeformScan = false;
					getTodoList(c.assetSysId);
					c.toggleFreeformSlider();
				}else{
					c.error = true;
					if(!!response.errorMessage){
						c.errorMessage = response.errorMessage;
					}
				}
			}, function(response){
				c.error = true;
			});
		});
	}

	c.openFreeformModal = function(){
		spModal.open({
			title: 'Freeform Task',
			buttons: [{label: 'Submit', primary: true}],
			input: true,
			size: 'lg'
		}).then(function(value){
			$http({
				method: 'post',
				url: '/api/x_gege9_asset_scan/asset_scanner/createFreeForm/' +
				c.assetSysId + '/' + value.replace("â", "'") + '/false',
				headers: {
					'Content-Type': 'application/json'
				}
			}).then(function(response){
				if(response.statusText === 'OK'){
					c.error = false;
					c.freeformDescription = '';
					c.freeformScan = false;
					getTodoList(c.assetSysId);
					c.toggleFreeformSlider();
				}else{
					c.error = true;
					if(!!response.errorMessage){
						c.errorMessage = response.errorMessage;
					}
				}
			}, function(response){
				c.errorMessage = "Unable to find this todo list. Try entering manually.";
				c.error = true;
			});
		});
	}
	
  c.serial_no = c.getParameterByName('serial_no');
  c.getAsset(c.serial_no);
}]]></client_script>
        <controller_as>c</controller_as>
        <css>
#content {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  height: 100%;
  margin: 0 auto;
  padding: 0px 5px 70px 5px;
}

.error-message {
  z-index: 999;
  margin-top: 10px;
  position: absolute;
}

#results {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 0px 10px;
}

#asset-details {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  width: 100%;
  margin-bottom: 10px;
}

.more-details-button {
 margin: 70px 0 10px 0; 
}

#confirm {
  background-color: #00bf6f; 
}

#reject {
  background-color: red; 
}

table {
 table-layout: fixed;
}

th, td {
  word-wrap: break-word; 
}

th.-v-align--middle {
  vertical-align: middle; 
}

input {
  margin-bottom: 10px; 
}

h5 {
  color: black;
  font-weight: 600;
  margin: 5px 0px;
}

hr {
  width: 100% !important; 
  height: 1px;
  background-color: rgb(200, 200, 200);
  margin: 10px;
}

.barcode-row {
  position: fixed;
  width: 100%;
  padding: 0 10px;
  background-color: #343d47;
  color: #fff;
  z-index: 999;
}

.barcode {
	display: flex;
  justify-content: flex-start;
  flex-direction: column;
  margin-top: 10px;
}

.barcode-label {
	font-size: 12px;
}

.barcode-number {
	font-size: 26px;
  color: #fff;
}

.asset-image {
	display: flex;
  align-self: center;
  margin-bottom: 15px;
  height: 150px;
  width: 200px;
}

.details-toggle {
  margin-top: 15px;
  font-size: 18px;
  margin-bottom: 3px;
}

.barcode-row-content {
	display:flex;
  justify-content: space-between;
}

.spinner {
  text-align: center;
  padding: 24px;
}

.asset-details {
  margin-top: 70px;
  width: 100%;
  display: flex;
	flex-direction: column;
  flex: 1;
  justify-content: space-around;
}

.asset-slider {
	overflow-y: hidden;
  height: 400px;
  transition: height .25s linear;
}

.asset-slider-closed {
  height: 0px;
  overflow-y: hidden;
  transition: height .25s linear;
}

.important-asset-detail {
    font-weight: bold;
    color: red;
    
}

.asset-lists {
  width: 100%;
	display: flex;
  flex-direction: column;
  margin-bottom: 75px;
  
}

.todo-instructions {
 padding: 5px; 
}

.asset-attr {
  display: flex;
  margin: 5px 10px;
}

.capitalize {
  text-transform: capitalize;
}

.attr {
  flex: 1 1 50%; 
}

.-align--center {
  align-self: center; 
}

.-align--stretch {
  align-self: stretch;
}

.accept-reject-button {
  width: 40%;
}

button #reject {
  background-color: red; 
}

button #confirm {
  background-color: green;
}

.todo-nav {
  font-size: 12px;
  text-align: center;
}

.todo-tab {
 padding: 0; 
}

.disabled-text, .disabled-text:hover {
  color: #A9A9A9;
  background-color: #ffffff;
}

.todo-list-container {
	display: flex;
  align-items: center;
  color: #717171;
  padding-bottom: 10px;
}

.todo-scan {
  padding-left: 0;
}

.todo-list-icon-container {
  text-align: center;
}

.to-do-items {
  padding-left: 0;
}

.todo-list {
  background-color: #ffffff;
}

.todo-number {
	align-self: flex-start; 
}

.todo-freeform-btn {
  height: 70px;
  background-color: #343d47;
  color: #ffffff;
}

.todo-freeform-btn-text {
	padding: 20px 0;
  font-size: 18px;
  text-align: center;
}

.todo-green-plus {
  padding: 12px 0;
  font-size: 18px;
	background-color: #343d47;
  height: 100%;
  overflow: hidden;
  color: #fff;
}

#freeformPlusIcon {
	border: 2px solid #ffffff;
  border-radius: 50%;
  padding: 5px 5px 6px 6px;
  margin-left: 15px;
  color: #fff;
}

.freeform-textarea-div {
  background-color: #343d47;
  height: 100%;
}

.create-new-task-container {
	background-color: #343d47;
  color: #ffffff;
  padding: 0;
}

.create-new-task {
  border: 1px dashed #ddd;
  border-radius: 5px;
  padding: 20px;
  margin: 15px;
  overflow: auto;
}

.create-new-task-header {
	float: left; 
}

.create-new-task-plus {
 	float: right; 
}

.checkbox {
	margin: 0 0 0 15px;
}

.todo-type {
	font-weight: bold;
}

.wordbreak {
	word-break: break-word; 
  hyphen: auto;
}

.freeform-container {
  display: flex;
  float: left;
  width: 100%;
  margin: 20px 0;
}
textarea {
 border: 1px solid #ccc; 
 border-radius: 5px 0px 0px 5px;
 height: 50px;
 resize: none;
 vertical-align: top;
 width: 79.75%;
 margin: 0 0 0 15px;
}

.has-error {
	border: 1px solid red !important; 
}

.freeform-submit {
 height: 50px;
 vertical-align: top;
 border-radius: 0px 5px 5px 0px; 
 padding: 0;
 background-color: #1ed760;
 color: #ffffff;
 margin: 0 0 0 0;
}

//Completed Tab
#completedTodo {
  padding-top: 5px;
}

.icon-key {
  background-color: #eeeeee; 
  max-width: 100%;
  padding: 3px 0;
  margin: 0 auto;
}

.icon-key img {
 	max-width: 50px; 
}

//Requests Tab
.no-requests {
	padding: 10px;  
}

.request-block {
	padding: 15px 20px;
}

.request-number {
	padding: 0 0 10px 0;
  font-size: 16px;
  font-weight: bold;
}

.request-title {
	font-weight: bold;
}

.requests-details {
  display: flex;
  align-items: center;
}


.checkbox {
	font-size: 16px;
}

.tab-content {
	margin-bottom: 60px;
}


// Add Tasks 
.add-tasks-row {
  position: fixed;
  width: 100%;
  background-color: #343d47;
  color: #fff;
  padding: 20px 0;
  font-size: 18px;
  text-align: center;
  z-index: 1000;
}

.task-button {
  background-color: #428bca;
  margin-top: 20px;
  padding: 30px 0;
  border-radius: 5px;
}

.slider {
	overflow-y: hidden;
  bottom:0;
  height: 100%;
  transition: height .25s linear;
}

.slider-closed {
  bottom: 40px;
  height: 70px;
  transition: height .25s linear;
}

//Home nav
.navbar {
	min-height: 0 !important;  
}

.bottom-nav {
	background-color: #fff;
  border-top: 1px solid #ccc;
  height: 40px;
}

.navbar-fixed-bottom {
	bottom: 0; 
}

.bottom-nav ul {
	padding: 0;
}

.bottom-nav li {
	padding: 0;
}

.home-menu {
  position: absolute;
  bottom: 0;
}

.navbar-nav {
  margin: 0 !important;
}

.navbar-nav li a {
 line-height: 15px !important; 
 padding: 5px 0 !important;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>scanned-information</id>
        <internal>false</internal>
        <link/>
        <name>Scanned Information</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	data.userSkills = [];
	var thisUser = gs.getUserID();
	var userSkillGR = new GlideRecord('sys_user_has_skill');
	userSkillGR.addQuery('active', true);
	userSkillGR.addQuery('user', thisUser);
	userSkillGR.query();
	while(userSkillGR.next()){
		gs.info('test');
		data.userSkills.push({
			sys_id: userSkillGR.skill.toString(),
			name: userSkillGR.skill.name.toString()
		});
	}
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>212613005</sys_created_by>
        <sys_created_on>2018-04-18 15:36:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e4b1ee29dbe11b00d087d8965e96193e</sys_id>
        <sys_mod_count>1590</sys_mod_count>
        <sys_name>Scanned Information</sys_name>
        <sys_package display_value="Asset Scanning" source="x_gege9_asset_scan">7be151dddbe55700d087d8965e9619c8</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Asset Scanning">7be151dddbe55700d087d8965e9619c8</sys_scope>
        <sys_update_name>sp_widget_e4b1ee29dbe11b00d087d8965e96193e</sys_update_name>
        <sys_updated_by>212607632</sys_updated_by>
        <sys_updated_on>2018-07-13 15:42:27</sys_updated_on>
        <template><![CDATA[<div id="content container-fluid" ng-click="c.closeBox($event)">
  <!-- The row with barcode and toggle -->
  <div class="barcode-row center-text center-block" ng-click="c.toggleDetails()">
    <div class="barcode-row-content">
      <div class="barcode">
        <span class="barcode-label">Barcode Information</span>
        <span class="barcode-number">{{c.serial_no.toUpperCase()}}</span>
      </div>
      <a class="details-toggle">
        <i id="freeformPlusIcon" ng-class="{'glyphicon glyphicon-chevron-up': !c.showDetails, 'glyphicon glyphicon-chevron-down': c.showDetails}"></i>
      </a>
    </div>
  </div>

  <div class="col-xs-12 more-details-button">
     <img ng-if="c.image" class="img img-responsive asset-image center-block" width="65" height="65"
       ng-src="{{c.image}}" />
    <button ng-click="c.viewAsset()" class="btn btn-default btn-sm col-xs-offset-3 col-xs-6">
      VIEW ASSET RECORD
    </button>
  </div>

  <div id="barcode_container" ng-show="c.showBarcode">

  </div>
  
  <!-- Error Alert -->
  <div class="alert alert-danger error-message" ng-show="c.error">
    {{c.errorMessage}}
  </div>

  <!-- The row with all the information about the asset -->
  <div id="asset-details" class="asset-details" ng-class="{'asset-slider': c.showDetails, 'asset-slider-closed': !c.showDetails}">
    <div id="results" ng-show="c.loaded">
      <div id="asset-details">
        <div class="asset-attr"> 
          <div class="attr pull-left"><b>Legal Hold</b></div> 
          <div class="attr pull-right" ng-class="{'important-asset-detail': c.details['Legal Hold'] == 'true'}">{{c.details["Legal Hold"]}}</div>
        </div>
        <div class="asset-attr"> 
          <div class="attr pull-left"><b>State</b></div> 
          <div class="attr pull-right">{{c.details["State"]}}</div>
        </div>
        <div class="asset-attr"> 
          <div class="attr pull-left"><b>Sub State</b></div> 
          <div class="attr pull-right" ng-class="{'important-asset-detail': c.details['Sub State'] == 'Pending repair'}">{{c.details["Sub State"]}}</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Bin</b></div> 
          <div class="attr pull-right" ng-hide="c.details['Bin'] == ''">{{c.details["Bin"]}}</div>
          <div class="attr pull-right" ng-show="c.details['Bin'] == ''">This asset is not assigned to a bin.</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Model Category</b></div> 
          <div class="attr pull-right">{{c.details["Model Category"]}}</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Model</b></div> 
          <div class="attr pull-right">{{c.details["Model"]}}</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Acquisition Country</b></div> 
          <div class="attr pull-right" ng-hide="c.details['Acquisition Country'] == ''">{{c.details["Acquisition Country"]}}</div>
          <div class="attr pull-right" ng-show="c.details['Acquisition Country'] == ''">This asset is not assigned to a country.</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Asset Type</b></div> 
          <div class="attr pull-right capitalize">{{c.details["Asset Type"]}}</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Retirement Date</b></div> 
          <div class="attr pull-right">{{c.details["Retirement Date"]}}</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Assigned to</b></div> 
          <div class="attr pull-right" ng-hide="c.details['Assigned To'] == ''">{{c.details["Assigned To"]}}</div>
          <div class="attr pull-right" ng-show="c.details['Assigned To'] == ''">This asset is not assigned.</div>
        </div>
        <div class="asset-attr">    
          <div class="attr pull-left"><b>Assigned to VIP</b></div> 
          <div class="attr pull-right capitalize">{{c.details["Assigned to VIP"]}}</div>
        </div>
      </div>
    </div>
  </div>
  <div class="spinner" ng-show="!c.loaded">
    <i class="fa fa-spinner fa-4x fa-pulse"></i>
  </div>
  <!-- The row with all the lists of stuffs -->
  <div class="asset-lists">
    <ul class="nav nav-tabs todo-nav">
      <li class="active col-xs-4 todo-tab">
        <a data-toggle="tab" href="#todo">To Do Items</a>
      </li>
      <li class="col-xs-4 todo-tab">
        <a data-toggle="tab" href="#completedTodo">To Do History</a>
      </li>
      <li class="col-xs-4 todo-tab">
        <a data-toggle="tab" href="#openRequest" ng-click="c.getRequestedItems(); c.getRecentIncidents();">Open Records</a>
      </li>
    </ul>
    <div class="tab-content">

      <!-- This is the todo tab content -->
      <div id="todo" class="tab-pane fade in active">

        <div ng-show="c.openTodos.length === 0">
          <h6>
            There are no to do items for this Asset. This is probably because it was sent without
            opening a request or the request was created before this app. Click the button below 
            to generate a list of to do items to receive it in to the depot.
          </h6>
          <button class="btn btn-primary center-block" ng-click="c.createNoRequestTodos()">
            Generate To Do List
          </button>
        </div>

        <div ng-show="c.openTodos.length > 0">
          <h6 class="todo-instructions">
            Click Scan/Done to complete the task.  Click Skip to move to the next task.
          </h6>
          <div class="todo-list" ng-repeat="todo in c.openTodos | orderBy: todo.order"
               ng-class="{'disabled disabled-text': todo.state == '3', 'disabled disabled-text-red': todo.state == '7'}">
            <div class="row todo-list-container">
              <div class="col-xs-1 todo-list-icon-container todo-number" ng-dblclick="c.orderFreeformTodos(todo)">
                <span ng-hide="c.freeformOrderClicked" >{{$index + 1}}.</span>
                <input ng-show="c.freeformOrderClicked" width="15" />
              </div>
              <div class="col-xs-7 todo-container">
                <div class="row">
                  <div class="col-xs-12 todo-type">
                    {{todo.type}}
                  </div>
                </div>
                <div class="row">
                  <div class="col-xs-12 wordbreak">
                    {{todo.shortDescription}}
                  </div>
                </div>
              </div>
              <div class="col-xs-2 todo-list-icon-container to-do-items">
                <button class="btn btn-primary" ng-click="c.scanTodo(todo)" 
                        ng-if="todo.type != 'Freeform' && todo.type != 'Investigate' && todo.type != 'Check Legal Hold'">
                  SCAN
                </button>
                <button class="btn btn-primary" ng-click="c.completeTodo(todo.sysId)" 
                        ng-if="todo.type == 'Freeform' || todo.type == 'Investigate'">
                  DONE
                </button>
                <button class="btn btn-primary" ng-click="c.markLegalHold(todo.sysId)" 
                        ng-if="todo.type == 'Check Legal Hold'">
                  HOLD
                </button>
              </div>
              <div class="col-xs-1 todo-list-icon-container to-do-items">
                <button class="btn btn-default" ng-click="c.markSkipped(todo.sysId)" ng-if="todo.type != 'Receiving'">
                  SKIP
                </button>
              </div>
            </div> 
          </div>
        </div>
      </div>

      <!-- This is the completed todo tab content-->
      <div id="completedTodo" class="list-group tab-pane fade">
        <div ng-hide="c.completedTodos.length > 0">
          There is no task history.
        </div>
        <div ng-show="c.completedTodos.length > 0" class="row icon-key">
          <div class="text-center col-xs-3">
            Icon Key: 
          </div>
          <div class="text-center col-xs-2">
            <img src="skip.svg" /> 
          </div>
          <span class="text-center col-xs-2">Skipped Task</span>
          <div class="text-center col-xs-2">
            <img src="completed.svg" />
          </div>
          <span class="text-center col-xs-2">Completed Task</span>
        </div>

        <div class="list-group-item todo-list" ng-repeat="todo in c.completedTodos | filter:{state:'!1'} | orderBy : '-lastUpdate'"
             ng-class="{'disabled disabled-text': todo.state == '3' || todo.state == '7'}" >
          <div class="row todo-list-container">
            <div class="col-xs-2">
              <div ng-if="todo.state== '3'">
                <img src="completed.svg" />
              </div>
              <div ng-if="todo.state== '7'">
                <img src="skip.svg" />
              </div>
            </div>
            <div class="col-xs-10">
              <div class="row">
                <div class="col-xs-12">
                  {{todo.type}} - {{todo.lastUpdate | date:'medium'}}
                </div>
              </div>
              <div class="row">
                <div class="col-xs-12">
                  {{todo.shortDescription}}
                </div>
              </div>
              <div class="row">
                <div class="col-xs-12">
                  {{todo.stockroom}}
                </div>
              </div>
            </div>
            <div class="col-xs-1 todo-list-icon-container">
              <i ng-class="{'glyphicon glyphicon-remove text-danger': todo.state !== '3' && todo.state !== '7'}"></i>
            </div>
          </div> 
        </div>
      </div>

      <!-- Open request tab content -->
      <div id="openRequest" class="tab-pane fade">
        <div class="spinner" ng-hide="c.noItems || c.requestsLoaded">
          <i class="fa fa-spinner fa-4x fa-pulse"></i>
        </div>
        <div class="request-block col-xs-12" ng-repeat="request in c.requests">
          <div class="row">
            <div class="col-xs-12 request-number">
              {{request.details.RITM}}
            </div>
          </div>
          
          <!-- Requests -->
          <div class="row requests-details">
            <div class="col-xs-8">
              <div class="row">
                <span class="col-xs-6 request-title">
                  Type:
                </span>
                <span class="col-xs-6">
                  {{request.details.Type}}
                </span>
              </div>
              <div class="row">
                <span class="col-xs-6 request-title">
                  Stage:
                </span>
                <span class="col-xs-6">
                  {{request.details.Stage}}
                </span>
              </div>
              <div class="row">
                <span class="col-xs-6 request-title">
                  Data Reclamation:
                </span>
                <span class="col-xs-6">
                  {{request.details['Data Reclamation']}}
                </span>
              </div>
            </div>
            <div class="col-xs-4">
              <a ng-click="c.viewRequestedItem(request.sysId)" class="btn btn-default center-block">
                DETAILS
              </a>
            </div>
          </div>
        </div>
        
         <!-- Incidents -->
        <div class="request-block col-xs-12" ng-repeat="incident in c.incidents">
          <div class="row">
            <div class="col-xs-12 request-number">
              {{incident.number}}
            </div>
          </div>
          <div class="row requests-details">
            <div class="col-xs-8">
              <div class="row">
                <span class="col-xs-6 request-title">
                  State:
                </span>
                <span class="col-xs-6">
                  {{incident.state}}
                </span>
              </div>
              <div class="row">
                <span class="col-xs-6 request-title">
                  Description:
                </span>
                <span class="col-xs-6">
                  {{incident.description}}
                </span>
              </div>
            </div>
            <div class="col-xs-4">
              <a ng-click="c.viewIncident(incident.sysId)" class="btn btn-default center-block">
                DETAILS
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- New Task Section -->
  <div class="add-tasks-row" ng-class="{slider: c.showTaskButtons, 'slider-closed': !c.showTaskButtons}">
    <div ng-click="c.toggleFreeformSlider()">
      ADD TASKS
   		 <i id="freeformPlusIcon" ng-class="{'glyphicon glyphicon-chevron-up': !c.showTaskButtons, 'glyphicon glyphicon-chevron-down': c.showTaskButtons}"></i>
    </div>
    <div class="container-fluid">
      <div class="col-xs-4 col-xs-offset-1 task-button" ng-click="c.addMoveTask()">
        MOVE ASSET
      </div>
      <div class="col-xs-4 col-xs-offset-2 task-button" ng-click="c.openFreeformModal()">
        FREEFORM
      </div>
    </div>
  </div>
  
  <!-- Home nav -->
  <div class="navbar navbar-fixed-bottom bottom-nav">
    <div class="container-fluid">
      <ul class="nav navbar-nav col-xs-12">
        <li class="text-center center-block col-xs-12">
          <a href="/asset_scan"><i class="glyphicon glyphicon-home"></i>
            <p>
              Home
            </p>
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
