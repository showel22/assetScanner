<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_gege9_asset_scan.AssetToDo</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This should be used to create todo items for assets that will show up in the mobile app.</description>
        <name>AssetToDo</name>
        <script><![CDATA[var AssetToDo = Class.create();
AssetToDo.prototype = {
    initialize: function(){
    },
	
    /**
    * @summary create Takes in the asset. The asset passes
	* in 5 params to create a task on the ToDo table.
	* @params: asset, type, short description, order and parent 
    * @param {string} - asset, type, short description, order and parent
	* @param {int} - state and active
	* @return new task record on ToDO
    */
	create: function(asset, type, shortDescription, order, parent){
		var toDoGR = new GlideRecord('x_gege9_asset_scan_todo');
		toDoGR.initialize();
		toDoGR.asset = asset;
		toDoGR.state = 1;
		toDoGR.active = true;
		toDoGR.type = type;
		toDoGR.short_description = shortDescription;
		toDoGR.order = order;
		toDoGR.parent = parent;
		return toDoGR.insert();
	},
	
	/**
    * @summary createFreeForm Takes in and asset. The asset passes
	* in 4 params to create a task on the ToDo table.
	* @params: asset, short description, scan and type 
    * @param {string} - asset, type, short description, order and parent
	* @param {int} - state and active
	* @return new FreeForm task record on ToDO
    */
	createFreeForm: function(asset, shortDescription, scan, type){		
		var toDoGR = new GlideRecord('x_gege9_asset_scan_todo');
		toDoGR.addQuery('asset', asset);
		toDoGR.orderByDesc('order');
		toDoGR.query();
		if(toDoGR.hasNext()){
			toDoGR.next();
			return this.create(asset, type, shortDescription, toDoGR.order + 1);
		}else{
			return this.create(asset, type, shortDescription, 0);
		}
	},
	
	/**
    * @summary createReclamation creates a task to reclaim an asset
	* @params: asset, order and parent
	* @param {string} - asset and parent
	* @param {int} - order
	* @return new reclamation task record on ToDo
    */
	createReclamation: function(asset, order, parent){
		return this.create(asset, 200, 
					"The previous owner has requested Data Reclamation." + 
						   " Tap here to scan the asset into the Data Reclamation bin.", order, parent);
	},
	
	/**
    * @summary createLegalHold creates a task to add to legal hold
	* @params: asset, order and parent
	* @param {string} - asset and parent
	* @param {int} - order
	* @return new legal hold task record on ToDo
    */
	createLegalHold: function(asset, order, parent){
		return this.create(asset, 300, 
					"This device is on Legal Hold. Tap here to scan the asset" +
						   " into the Legal Hold bin.", order, parent);
	},
	
	/**
    * @summary createReceived creates a task to scan asset
	* into the depot
	* @params: asset, order and parent
	* @param {string} - asset and parent
	* @param {int} - order
	* @return new received task record on ToDo
    */
	createReceived: function(asset, order, parent){
		return this.create(asset, 500, 
					"Tap here to scan the asset into the depot.", order, parent);
	},
	
	/**
    * @summary createWipe creates a task to add asset
	* to the data wipe bin
	* @params: asset, order and parent
	* @param {string} - asset and parent
	* @param {int} - order
	* @return new Wipe task record on ToDo
    */
	createWipe: function(asset, order, parent){
		return this.create(asset, 400, 
					"Tap here to scan the asset into the Data Wipe bin.", order, parent);
	},
	
	/**
    * @summary checkLegalHold creates a task to check 
	* the legal hold status of an asset
	* @params: asset, order and parent
	* @param {string} - asset and parent
	* @param {int} - order
	* @return new check legal hold task record on ToDo
    */
	createCheckLegalHold: function(asset, order, parent){
		return this.create(asset, 700,
						  "This device has no open requests, you have to " +
						  "manually verify in Atlas that this device is not on legal hold.",
						  order, parent);
	},
	
	/**
    * @summary createInvestigate creates a task to check 
	* the status of an asset
	* @params: asset and order
	* @param {string} - asset
	* @param {int} - order
	* @return new investigate task record on ToDo
    */
	createInvestigate: function(asset, order){
		return this.create(asset, 800,
						  "This device has no open requests, you may need " + 
						   "to find out why this is here from the owner.", order);
	},
	
	
	/**
    * @summary createToDoList creates a series of task
	* records on an asset; Received, Reclamation, 
	* Legal hold and wipe tasks
	* the status of an asset
	* @params {sting} asset, dataReclamation, legal hold and parent
	* @return new received, reclamation, legal hold
	* and wipe task records on ToDo
    */
	createToDoList: function(asset, dataReclamation, legalHold, parent){
		var order = 0;
		this.createReceived(asset, order++, parent);
		if(dataReclamation){
			this.createReclamation(asset, order++, parent);
		}
		if(legalHold){
			this.createLegalHold(asset, order++, parent);
		}
		if(!legalHold){
			this.createWipe(asset, order++, parent);
		}
	},
	
	/**
    * @summary createToDoListNoRequests checks an asset
	* @param {string} - asset
	* @return true that an asset has no known ToDo tasks
    */
	createToDoListNoRequests: function(asset){
		var order = 0;
		this.createInvestigate(asset, order++);
		return true;
	},
	
	/**
    * @summary createToDoList returns all to do items
	* for an asset 
	* @params: asset and order
	* @param {string} - asset
	* @param {int} - order
	* @return all items on an asset ToDo list
    */
	getToDoList: function(asset){
		var toDoList = [];
		var toDoGR = new GlideRecord('x_gege9_asset_scan_todo');
		toDoGR.addQuery('asset', asset);
		toDoGR.orderBy('order');
		toDoGR.query();
		while(toDoGR.next()){
			var gdt = new GlideDateTime(toDoGR.sys_updated_on.toString());
			toDoList.push({
				type: toDoGR.type.getDisplayValue(),
				typeValue: toDoGR.type.toString(),
				state: toDoGR.state.toString(),
				shortDescription: toDoGR.short_description.toString(),
				stockroom: toDoGR.stockroom.getDisplayValue(),
				order: toDoGR.order.toString(),
					lastUpdate: gdt.getDisplayValue(), 
				sysId: toDoGR.sys_id.toString()
			});
		}
		return toDoList;
	},
	
	/**
    * @summary markComplete returns true or
	* false if an assets ToDos are complete
	* @return true if ToDo comlete or flase if not
    */
	markComplete: function(todo){
		var toDoGR = new GlideRecord('x_gege9_asset_scan_todo');
		toDoGR.addQuery('sys_id', todo);
		toDoGR.query();
		toDoGR.next();
		toDoGR.state = 3;
		if(toDoGR.update()){
			return true;
		}else{
			return false;
		}
	},
	
	/**
    * @summary markSkipped returns true or
	* false if an assets ToDos are skipped
	* @return true if ToDo skipped or flase if not
    */
	markSkipped: function(todo){
		var toDoGR = new GlideRecord('x_gege9_asset_scan_todo');
		toDoGR.addQuery('sys_id', todo);
		toDoGR.query();
		toDoGR.next();
		toDoGR.state = 7;
		if(toDoGR.update()){
			return true;
		}else{
			return false;
		}
	},

    type: 'AssetToDo'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>212607632</sys_created_by>
        <sys_created_on>2018-04-24 13:51:39</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>31f241ebdbe99340d087d8965e96198e</sys_id>
        <sys_mod_count>91</sys_mod_count>
        <sys_name>AssetToDo</sys_name>
        <sys_package display_value="Asset Scanning" source="x_gege9_asset_scan">7be151dddbe55700d087d8965e9619c8</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Asset Scanning">7be151dddbe55700d087d8965e9619c8</sys_scope>
        <sys_update_name>sys_script_include_31f241ebdbe99340d087d8965e96198e</sys_update_name>
        <sys_updated_by>212742586</sys_updated_by>
        <sys_updated_on>2019-11-18 18:01:39</sys_updated_on>
    </sys_script_include>
</record_update>
